{
  "timestamp": "2025-07-28T21:57:35.409899",
  "test_summary": {
    "total_tests": 7,
    "passed_tests": 7,
    "failed_tests": 0,
    "success_rate_percent": 100.0
  },
  "test_results": {
    "data_loading": {
      "status": "passed",
      "samples": 1000,
      "features": 65,
      "missing_values": "0",
      "label_distribution": {
        "BENIGN": 809,
        "MALICIOUS": 191
      }
    },
    "ml_training": {
      "status": "passed",
      "training_time_seconds": 589.9322490692139,
      "trained_models": [
        "RandomForest",
        "KNN",
        "NaiveBayes",
        "MLP",
        "AdaptiveKNN",
        "AdaptiveRandomForest"
      ],
      "missing_models": [],
      "training_results": {
        "RandomForest": {
          "accuracy": 0.81,
          "precision": 0.6561,
          "recall": 0.81,
          "f1_score": 0.7249723756906077,
          "confusion_matrix": [
            [
              0,
              38
            ],
            [
              0,
              162
            ]
          ],
          "classification_report": "              precision    recall  f1-score   support\n\n           5       0.00      0.00      0.00        38\n          10       0.81      1.00      0.90       162\n\n    accuracy                           0.81       200\n   macro avg       0.41      0.50      0.45       200\nweighted avg       0.66      0.81      0.72       200\n",
          "false_negative_rate": 0.5,
          "roc_auc": 0,
          "training_time": 0.320049,
          "model_name": "RandomForest",
          "cv_mean": 0.8087500000000001,
          "cv_std": 0.003061862178478962
        },
        "KNN": {
          "accuracy": 0.79,
          "precision": 0.7268439716312056,
          "recall": 0.79,
          "f1_score": 0.7432000000000001,
          "confusion_matrix": [
            [
              4,
              34
            ],
            [
              8,
              154
            ]
          ],
          "classification_report": "              precision    recall  f1-score   support\n\n           5       0.33      0.11      0.16        38\n          10       0.82      0.95      0.88       162\n\n    accuracy                           0.79       200\n   macro avg       0.58      0.53      0.52       200\nweighted avg       0.73      0.79      0.74       200\n",
          "false_negative_rate": 0.47205977907732294,
          "roc_auc": 0,
          "training_time": 0.074093,
          "model_name": "KNN",
          "cv_mean": 0.7762500000000001,
          "cv_std": 0.01785357107135715
        },
        "NaiveBayes": {
          "accuracy": 0.71,
          "precision": 0.7213441832429175,
          "recall": 0.71,
          "f1_score": 0.7154374999999998,
          "confusion_matrix": [
            [
              11,
              27
            ],
            [
              31,
              131
            ]
          ],
          "classification_report": "              precision    recall  f1-score   support\n\n           5       0.26      0.29      0.28        38\n          10       0.83      0.81      0.82       162\n\n    accuracy                           0.71       200\n   macro avg       0.55      0.55      0.55       200\nweighted avg       0.72      0.71      0.72       200\n",
          "false_negative_rate": 0.45094217024041583,
          "roc_auc": 0,
          "training_time": 0.003092,
          "model_name": "NaiveBayes",
          "cv_mean": 0.7,
          "cv_std": 0.02592055169165961
        },
        "MLP": {
          "accuracy": 0.76,
          "precision": 0.7345016611295683,
          "recall": 0.76,
          "f1_score": 0.7454109961894393,
          "confusion_matrix": [
            [
              9,
              29
            ],
            [
              19,
              143
            ]
          ],
          "classification_report": "              precision    recall  f1-score   support\n\n           5       0.32      0.24      0.27        38\n          10       0.83      0.88      0.86       162\n\n    accuracy                           0.76       200\n   macro avg       0.58      0.56      0.56       200\nweighted avg       0.73      0.76      0.75       200\n",
          "false_negative_rate": 0.44022092267706303,
          "roc_auc": 0,
          "training_time": 0.704219,
          "model_name": "MLP",
          "cv_mean": 0.76,
          "cv_std": 0.02113941815660971
        },
        "AdaptiveKNN": {
          "accuracy": 0.8,
          "precision": 0.73359375,
          "recall": 0.8,
          "f1_score": 0.7432571849668386,
          "confusion_matrix": [
            [
              3,
              35
            ],
            [
              5,
              157
            ]
          ],
          "classification_report": "              precision    recall  f1-score   support\n\n           5       0.38      0.08      0.13        38\n          10       0.82      0.97      0.89       162\n\n    accuracy                           0.80       200\n   macro avg       0.60      0.52      0.51       200\nweighted avg       0.73      0.80      0.74       200\n",
          "false_negative_rate": 0.4759584145549058,
          "roc_auc": 0,
          "training_time": 5.383123,
          "model_name": "AdaptiveKNN",
          "cv_mean": 0.7226274878670074,
          "cv_std": 0.0044887972342638255
        },
        "AdaptiveRandomForest": {
          "accuracy": 0.81,
          "precision": 0.6561,
          "recall": 0.81,
          "f1_score": 0.7249723756906077,
          "confusion_matrix": [
            [
              0,
              38
            ],
            [
              0,
              162
            ]
          ],
          "classification_report": "              precision    recall  f1-score   support\n\n           5       0.00      0.00      0.00        38\n          10       0.81      1.00      0.90       162\n\n    accuracy                           0.81       200\n   macro avg       0.41      0.50      0.45       200\nweighted avg       0.66      0.81      0.72       200\n",
          "false_negative_rate": 0.5,
          "roc_auc": 0,
          "training_time": 90.365646,
          "model_name": "AdaptiveRandomForest",
          "cv_mean": 0.7219987670524599,
          "cv_std": 0.004270788446634291
        }
      }
    },
    "predictions": {
      "status": "passed",
      "predictions": {
        "RandomForest": {
          "trust_score": 10.0,
          "confidence": 0.8679165041093044,
          "mfa_required": "False",
          "access_decision": "ALLOW",
          "authentication_latency_ms": 102.0,
          "model_used": "RandomForest",
          "timestamp": "2025-07-28T21:55:23.070134",
          "stride_risk_level": "LOW_RISK"
        },
        "KNN": {
          "trust_score": 10.0,
          "confidence": 1.0,
          "mfa_required": "False",
          "access_decision": "ALLOW",
          "authentication_latency_ms": 9.534,
          "model_used": "KNN",
          "timestamp": "2025-07-28T21:55:23.081315",
          "stride_risk_level": "LOW_RISK"
        },
        "NaiveBayes": {
          "trust_score": 10.0,
          "confidence": 0.9604104798884913,
          "mfa_required": "False",
          "access_decision": "ALLOW",
          "authentication_latency_ms": 3.299,
          "model_used": "NaiveBayes",
          "timestamp": "2025-07-28T21:55:23.084742",
          "stride_risk_level": "LOW_RISK"
        },
        "MLP": {
          "trust_score": 10.0,
          "confidence": 0.9999821987574944,
          "mfa_required": "False",
          "access_decision": "ALLOW",
          "authentication_latency_ms": 3.076,
          "model_used": "MLP",
          "timestamp": "2025-07-28T21:55:23.088888",
          "stride_risk_level": "LOW_RISK"
        },
        "AdaptiveKNN": {
          "trust_score": 10.0,
          "confidence": 1.0,
          "mfa_required": "False",
          "access_decision": "ALLOW",
          "authentication_latency_ms": 2.9659999999999997,
          "model_used": "AdaptiveKNN",
          "timestamp": "2025-07-28T21:55:23.092441",
          "stride_risk_level": "LOW_RISK"
        },
        "AdaptiveRandomForest": {
          "trust_score": 10.0,
          "confidence": 0.9521285121476634,
          "mfa_required": "False",
          "access_decision": "ALLOW",
          "authentication_latency_ms": 21.562,
          "model_used": "AdaptiveRandomForest",
          "timestamp": "2025-07-28T21:55:23.114138",
          "stride_risk_level": "LOW_RISK"
        }
      },
      "prediction_times_ms": {
        "RandomForest": 102.46491432189941,
        "KNN": 10.919809341430664,
        "NaiveBayes": 3.3788681030273438,
        "MLP": 4.038333892822266,
        "AdaptiveKNN": 3.4940242767333984,
        "AdaptiveRandomForest": 21.64006233215332
      },
      "average_prediction_time_ms": 24.322668711344402
    },
    "evaluation": {
      "status": "passed",
      "evaluation_results": {
        "RandomForest": {
          "error": "Labels in y_true and y_pred should be of the same type. Got y_true=['BENIGN' 'MALICIOUS'] and y_pred=[ 5 10]. Make sure that the predictions provided by the classifier coincides with the true labels.",
          "accuracy": 0,
          "precision": 0,
          "recall": 0,
          "f1_score": 0,
          "auc": 0
        },
        "KNN": {
          "error": "Labels in y_true and y_pred should be of the same type. Got y_true=['BENIGN' 'MALICIOUS'] and y_pred=[ 5 10]. Make sure that the predictions provided by the classifier coincides with the true labels.",
          "accuracy": 0,
          "precision": 0,
          "recall": 0,
          "f1_score": 0,
          "auc": 0
        },
        "NaiveBayes": {
          "error": "Labels in y_true and y_pred should be of the same type. Got y_true=['BENIGN' 'MALICIOUS'] and y_pred=[ 5 10]. Make sure that the predictions provided by the classifier coincides with the true labels.",
          "accuracy": 0,
          "precision": 0,
          "recall": 0,
          "f1_score": 0,
          "auc": 0
        },
        "MLP": {
          "error": "Labels in y_true and y_pred should be of the same type. Got y_true=['BENIGN' 'MALICIOUS'] and y_pred=[ 5 10]. Make sure that the predictions provided by the classifier coincides with the true labels.",
          "accuracy": 0,
          "precision": 0,
          "recall": 0,
          "f1_score": 0,
          "auc": 0
        },
        "AdaptiveKNN": {
          "error": "Labels in y_true and y_pred should be of the same type. Got y_true=['BENIGN' 'MALICIOUS'] and y_pred=[10]. Make sure that the predictions provided by the classifier coincides with the true labels.",
          "accuracy": 0,
          "precision": 0,
          "recall": 0,
          "f1_score": 0,
          "auc": 0
        },
        "AdaptiveRandomForest": {
          "error": "Labels in y_true and y_pred should be of the same type. Got y_true=['BENIGN' 'MALICIOUS'] and y_pred=[ 5 10]. Make sure that the predictions provided by the classifier coincides with the true labels.",
          "accuracy": 0,
          "precision": 0,
          "recall": 0,
          "f1_score": 0,
          "auc": 0
        }
      },
      "best_model": null,
      "best_f1_score": 0
    },
    "visualizations": {
      "status": "passed",
      "visualization_results": {
        "confusion_matrix": "generated",
        "roc_curves": "generated",
        "feature_importance": "generated",
        "performance_comparison": "generated"
      },
      "successful_charts": 4,
      "total_charts": 4
    },
    "api_endpoints": {
      "status": "passed",
      "api_tests": {
        "health": "passed",
        "status": "passed",
        "training": "failed: HTTPConnectionPool(host='localhost', port=5001): Read timed out. (read timeout=120)"
      },
      "successful_tests": 2,
      "total_tests": 3
    },
    "benchmarks": {
      "status": "passed",
      "benchmark_results": {
        "RandomForest": {
          "throughput_sessions_per_second": 11732.957878681216,
          "average_authentication_latency_ms": 0.08523,
          "total_processing_time_seconds": 0.08523,
          "sessions_processed": 1000,
          "predictions_sample": [
            10,
            5,
            10,
            10,
            10,
            10,
            10,
            10,
            10,
            10
          ]
        },
        "KNN": {
          "throughput_sessions_per_second": 14908.906580791367,
          "average_authentication_latency_ms": 0.067074,
          "total_processing_time_seconds": 0.067074,
          "sessions_processed": 1000,
          "predictions_sample": [
            10,
            5,
            10,
            10,
            10,
            10,
            10,
            10,
            10,
            10
          ]
        },
        "NaiveBayes": {
          "throughput_sessions_per_second": 281848.9289740699,
          "average_authentication_latency_ms": 0.003548,
          "total_processing_time_seconds": 0.003548,
          "sessions_processed": 1000,
          "predictions_sample": [
            10,
            5,
            5,
            10,
            10,
            5,
            10,
            10,
            5,
            10
          ]
        },
        "MLP": {
          "throughput_sessions_per_second": 175746.9244288225,
          "average_authentication_latency_ms": 0.00569,
          "total_processing_time_seconds": 0.00569,
          "sessions_processed": 1000,
          "predictions_sample": [
            10,
            5,
            10,
            10,
            10,
            10,
            10,
            10,
            10,
            10
          ]
        },
        "AdaptiveKNN": {
          "throughput_sessions_per_second": 19940.974714844062,
          "average_authentication_latency_ms": 0.050148,
          "total_processing_time_seconds": 0.050148,
          "sessions_processed": 1000,
          "predictions_sample": [
            10,
            10,
            10,
            10,
            10,
            10,
            10,
            10,
            10,
            10
          ]
        },
        "AdaptiveRandomForest": {
          "throughput_sessions_per_second": 41602.529433789576,
          "average_authentication_latency_ms": 0.024037,
          "total_processing_time_seconds": 0.024037,
          "sessions_processed": 1000,
          "predictions_sample": [
            10,
            5,
            10,
            10,
            10,
            10,
            10,
            10,
            10,
            10
          ]
        }
      },
      "fastest_model": null,
      "fastest_time_ms": Infinity
    }
  },
  "system_info": {
    "python_version": "3.13.1 (v3.13.1:06714517797, Dec  3 2024, 14:00:22) [Clang 15.0.0 (clang-1500.3.9.4)]",
    "platform": "posix",
    "working_directory": "/Users/knight/Apps/trust_engine_app"
  }
}